law(echo, language(javascript))
/*
	upon adoption also initialize
		key: peers, value: {}
*/
UPON("adopted", function() { 
  
    DO("set", { 
      key: name, 
      value: {
         visibility: "public",
         val: "nameOfPerson"
      } 
    }); 
    
    DO("set", { 
      key: peers, 
      value: {} 
    }); 

    if (this.self !== directory) { 
      DO("forward", { 
         sender: this.self, 
         receiver: directory , 
         message: { 
            command: "adopted", 
            controller: this.self 
         } 
      }); 
      return true; 
    } 
    return true; 
});

UPON("sent", function() {
  if (this.message.command === "set") { 
      if(message.key !== "name") {
        obj thing = CS(message.key);
        thing.visibility = message.visibility;
	DO("set", { 
      	   key: message.key, 
           value: {
              val: thing.value,
              visibility: thing.visibility 
           }
        });  
      }
      return true;
  }
  
});

UPON("sent", function() {
  if (this.message.command === "add") { 
      DO("set", { 
      	key: message.key, 
        value: {
           visibility: "public", 
           val: message.value
        }
      });  
      return true;     
  }
  
});

UPON("sent", function() {
  if (this.message.command === "update") { 
      obj thing = CS(message.key);
      if (thing === null) {
	 DO("set", { 
      	    key: message.key, 
            value: {
               visibility: "public", 
               val: message.value
            }
         }); 
         return true;  
      }
      else {
         thing.val = message.value;
	 DO("set", { 
      	    key: message.key, 
            value: {
               visibility: "public", 
               val: thing.val
            }
         }); 
         return true;
      }
      return true;    
  }
});

UPON("sent", function() {
  if (this.message.command === "remove") { 
      DO("unset", { 
         key: message.key 
      }); 
      return true;    
  }
  
});

UPON("sent", function() {
  if (this.message.command === "directory" && this.sender !== directory) { 
      DO("forward"); 
      return true;    
  }
  
});

UPON("sent", function() {
  if (this.message.command === "DirectorySearch") { 
      DO("forward"); 
      return true;    
  }
  
});

UPON("sent", function() {
  if (this.message.command === "friend") { 
      var peers = CS("peers");
      peers[this.message.identity] = "pending";
      DO("forward"); 
      return true;    
  }
  
});

UPON("arrived", function() {
 
  /* reject all messages from a blocked user */
  var peers = CS("peers");
  var status = peers[this.sender];
  if(status !== undefined && status === "blocked"){
  	return false;
  } 
  
  /* friend(identity) */
  if(this.message.command === "friend"){
  	DO("set", {
		key: this.sender,
		value: "pending"  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "friend requested you!"
  		}
  	});
  	return true;
  }
  
  /* approve(identity) */
  if(this.message.command === "approve"){
  	DO("set", {
		key: this.sender,
		value: "friends"  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "accepted your friend request! :D"
  		}
  	});
  }
  
  /* reject(identity) */
  if(this.message.command === "reject"){
  	DO("unset", {
		key: this.sender  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "rejected your friend request. :("
  		}
  	});
  }
  
  /* request(identity, key) */
  /*changed event to command*/
  if(this.message.command === "request"){
  	var item = CS(message.key);
  	var status = CS(sender);
  	
  	if(item === undefined){
  		return true;
  	}
  	
  	if((item.visibility === "private" && status === "friend") || item.visibility === "public" ){
  		DO("forward", {
  			sender: this.self,
  			receiver: this.sender,
  			message: item
  		});
  	} 
  	
  	return true;
  }
  
  /*directorySearch(criteria)*/
  if(this.message.command === "directorySearch" && this.self === directory){
  	
  }	    

  /*directory(action, key)*/
  if(this.message.command === "directory" && this.self === directory){
  	
  }	
  
  /* message(identity, val) */
  if(this.message.command === "message"){
  	DO("deliver", { 
  		message: { 
  			from: this.sender, 
  			message: this.message.val 
  		}
  	});
  	return true;
  }
  
  DO("deliver");
  return true;
});

UPON("disconnected", function() {
  DO("quit");
  return true;
});