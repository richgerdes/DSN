law(echo, language(javascript))
/*
	upon adoption if directory also initialize
*/
directory_host = "directory@172.31.150.117";

UPON("adopted", function() { 
  
    DO("set", { 
      key: "name", 
      value: {
         visibility: "public",
         val: this.self
      } 
    });
	
    DO("set", { 
      key: "peers", 
      value: {} 
    });
	
	DO("set", {
		key: "directory",
		value: {}
	});

    if (this.self !== directory_host) { 
      DO("forward", { 
         sender: this.self, 
         receiver: directory_host , 
         message: { 
            command: "adopted", 
            controller: this.self 
         } 
      }); 
      return true; 
    } 
    return true; 
});

UPON("sent", function() {
	
  var parts2 = this.message.split(" ", 2);
  var parts3 = this.message.split(" ", 3);
  var parts4 = this.message.split(" ", 4);
  var msg = {command:parts2[0]};
  
  switch(msg.command){
	case "set":
	  msg.visibility = parts3[1];
	  msg.key = parts3[2];
	  break;
	case "add":
	case "update":
	  msg.key = parts3[1];
	  msg.value = parts3[2];
	  break;
	case "remove":
	  msg.key = parts2[1];
	  break;
	case "directory":
	  if(parts3[1] == "list" || parts3[1] == "unlist"){
	    msg.action = parts3[1];
        msg.key = parts3[2];
		msg.value = (CS(msg.key) !== undefined)?CS(msg.key).val:"";
	  }else if(parts3[1] == "search"){
		msg.action = parts3[1];
		msg.criteria = eval("(function(){return " + parts3[2] + ";})()");
	  }
	  break;
	case "request":
	  msg.identity = parts3[1];
	  msg.key = parts3[2];
	  break;
	case "friend":
	case "approve":
	case "reject":
	case "revoke":
	case "block":
	case "unblock":
	  msg.identity = parts2[1];
	  break;
	case "message":
	  msg.identity = parts3[1];
	  msg.val = parts3[2];
	  break;
	default:
	  DO("deliver", {
        sender:this.sender,
        receiver:this.self,
        message: "Invalid command!! Try again!"
      });
	  return false;
	  break;
  }
  
  if (msg.command === "set") { 
      if(msg.key !== "name") {
        var thing = CS(msg.key);
        thing.visibility = msg.visibility;
		DO("set", { 
      	   key: msg.key, 
           value: thing
        });
      }
      return true;
  }
  
  if (msg.command === "add") { 
      DO("set", { 
      	key: msg.key, 
        value: {
           visibility: "public", 
           val: msg.value
        }
      });
      return true;     
  }
  
  if (msg.command === "update") { 
      var thing = CS(msg.key);
      if (thing === undefined) {
	 DO("set", { 
      	    key: msg.key, 
            value: {
               visibility: "public", 
               val: msg.value
            }
         });
      }
      else {
         thing.val = msg.value;
		DO("set", { 
      	    key: msg.key, 
            value: thing
         }); 
      }
      return true;    
  }
  
  if (msg.command === "remove") { 
      DO("unset", { 
         key: msg.key 
      });
      return true;    
  }
  
  if (msg.command === "directory" && this.self !== directory_host) { 
      DO("forward", {
        sender:this.self,
        receiver:directory_host,
        message: msg
      });
      return true;    
  }
		
  if (msg.command === "request") { 
      DO("forward",{
        sender:this.self,
        receiver:msg.identity,
        message: msg
      });
      return true;    
  }
		
  if (msg.command === "friend") { 
      var peers = CS("peers");
      peers[msg.identity] = "pending";
      DO("forward",{
        sender:this.self,
        receiver:msg.identity,
        message: msg
      }); 
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
  
  if (msg.command === "approve") { 
      var peers = CS("peers");
	  if(peers[msg.identity] === "requested"){
		  DO("forward",{
			sender:this.self,
			receiver:msg.identity,
			message: msg
		  });
	  }
      peers[msg.identity] = "friend";
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
 
  if (msg.command === "reject") { 
      var peers = CS("peers");
      peers[msg.identity] = "public";
      DO("forward",{
        sender:this.self,
        receiver:msg.identity,
        message: msg
      });
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
 
  if (msg.command === "revoke") { 
      var peers = CS("peers");
      peers[msg.identity] = "public";
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
 
  if (msg.command === "block") { 
      var peers = CS("peers");
      peers[msg.identity] = "blocked";
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
 
  if (msg.command === "unblock") { 
      var peers = CS("peers");
      peers[msg.identity] = "public";
	  DO("set",{
		key: "peers", 
		value: peers
	  });
      return true;    
  }
 
  if (msg.command === "message") { 
      DO("forward",{
        sender:this.self,
        receiver:msg.identity,
        message: msg
      });
      return true; 
  }
  
  DO("deliver", {
	sender:this.sender,
	receiver:this.self,
	message: "Invalid command!! No Action Taken."
  });
  return false;
  
});

UPON("arrived", function() {
	
  /* reject all messages from a blocked user */
  var peers = CS("peers");
  var status = peers[this.sender];
  if(status !== undefined && status === "blocked"){
  	return false;
  } 
  
  /* friend(identity) */
  if(this.message.command === "friend"){
  	var peers = CS("peers");
  	peers[this.sender] = "requested";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "friend requested you!"
  		}
  	});
  	return true;
  }
  
  /* approve(identity) */
  if(this.message.command === "approve"){
  	var peers = CS("peers");
  	peers[this.sender] = "friend";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "accepted your friend request! :D"
  		}
  	});
  	return true;
  }
  
  /* reject(identity) */
  if(this.message.command === "reject"){
  	var peers = CS("peers");
  	peers[this.sender] = "public";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "rejected your friend request. :("
  		}
  	});
  	return true;
  }
  
  /* request(identity, key) */
  if(this.message.command === "request"){
  	var item = CS(this.message.key);
  	var peers = CS("peers");
  	var status = peers[this.sender];
  	
  	if(item === undefined){
  		return false;
  	}
  	
  	if((item.visibility === "private" && status === "friend") || item.visibility === "public" ){
  		DO("forward", {
  			sender: this.self,
  			receiver: this.sender,
  			message: { key: this.message.key, value: item.val } 
  		});
  	} 
  	return true;
  }
		
  /*directory(action, key, value)*/
  if(this.message.command === "directory" && this.self === directory_host){
	
  	if(this.message.action === "list"){
  		var directory = CS("directory");
  		directory[this.sender][this.message.key] = this.message.value;
  		DO("set", {
			key: "directory",
			value: directory  	
  		});
  		return true; 
  	}
  	
  	if(this.message.action === "unlist"){
  		var directory = CS("directory");
  		directory[this.sender][this.message.key] = undefined;
  		DO("set", {
			key: "directory",
			value: directory  	
  		});
  		return true;
  	}
	
	if(this.message.action === "search"){
  		var directory = CS("directory");
		var list = [];
		for(person in directory) {
			var keepPerson = true; //only want to do AND scenarios
			for(key in this.message.criteria){
				if(directory[person][key] !== this.message.criteria[key]){
					keepPerson = false;
				}  			
			}
			if(keepPerson){
				list.push(person);
			}
		}
		DO("forward", {
			sender: this.self,
			receiver: this.sender,
			message: list
		});
		return true;
	}
	
	DO("forward", {
		sender: this.self,
		receiver: this.sender,
		message: "Invalid message"
	});
	
  	return false;
  }	
  
  
  /*adopted(person)*/
  if(this.message.command === "adopted" && this.self === directory_host){
  	var directory = CS("directory");
  	directory[this.message.controller] = { name: this.message.controller };
  	/*directory[this.sender][<name>] = stuff;*/
  	DO("set", {
		key: "directory",
		value: directory  	
  	});
  	return true;
  }
  
  /* message(identity, val) */
  if(this.message.command === "message"){
  	DO("deliver", { 
  		message: { 
  			from: this.sender, 
  			message: this.message.val 
  		}
  	});
  	return true;
  }
  
  DO("deliver",{
	sender: this.self,
	receiver: this.self,
	message: this.message
  });
  return true;
});

UPON("disconnected", function() {
  DO("quit");
  return true;
});