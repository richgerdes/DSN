law(echo, language(javascript))
/*
	upon adoption if directory also initialize
*/

var directory = "directory@172.31.130.199";

UPON("adopted", function() { 
  
    DO("set", { 
      key: "name", 
      value: {
         visibility: "public",
         val: this.self
      } 
    }); 
    
    DO("set", { 
      key: "peers", 
      value: {} 
    }); 
	
	DO("set", {
		key: "directory",
		value: {}
	});

    if (this.self !== directory) { 
      DO("forward", { 
         sender: this.self, 
         receiver: directory , 
         message: { 
            command: "adopted", 
            controller: this.self 
         } 
      }); 
      return true; 
    } 
    return true; 
});

UPON("sent", function() {
  var parts2 = this.message.split(" ", 2);
  var parts3 = this.message.split(" ", 3);
  var parts4 = this.message.split(" ", 4);
  var msg = {command:parts2[0]};
  
  switch(msg.command){
	case "set":
	  msg.visibility = parts3[1];
	  msg.key = parts3[2];
	  break;
	case "add":
	case "update":
	  msg.key = parts3[1];
	  msg.value = parts3[2];
	  break;
	case "remove":
	  msg.key = parts2[1];
	  break;
	case "request":
	  msg.key = parts3[2];
	  msg.identity = parts3[1];
	  break;
	case "directory":
	  if(parts3[1] == "list" || parts3[1] == "unlist"){
	    msg.action = parts3[1];
        msg.key = parts3[3];
	  }else if(parts3[1] == "search"){
		msg.action = parts3[1];
		msg.criteria = parts3[2];
	  }
	  break;
	case "friend":
	case "approve":
	case "reject":
	case "revoke":
	case "block":
	case "unblock":
	  msg.identity = parts2[1];
	  break;
	case "message":
	  msg.identity = parts3[1];
	  msg.identity = parts3[2];
	  break;
	default:
	  DO("forward", {
        sender:this.sender,
        receiver:this.self,
        message: "Invalid command!! Try again!"
      });
	  return false;
	  break;
  }
  
  if (msg.command === "set") { 
      if(msg.key !== "name") {
        var thing = CS(msg.key);
        thing.visibility = msg.visibility;
	DO("set", { 
      	   key: msg.key, 
           value: {
              val: thing.value,
              visibility: thing.visibility 
           }
        });  
      }
      return true;
  }
  
  if (msg.command === "add") { 
      DO("set", { 
      	key: msg.key, 
        value: {
           visibility: "public", 
           val: msg.value
        }
      });  
      return true;     
  }
  
  if (msg.command === "update") { 
      var thing = CS(msg.key);
      if (thing === null) {
	 DO("set", { 
      	    key: msg.key, 
            value: {
               visibility: "public", 
               val: msg.value
            }
         }); 
         return true;  
      }
      else {
         thing.val = msg.value;
	 DO("set", { 
      	    key: msg.key, 
            value: {
               visibility: "public", 
               val: thing.val
            }
         }); 
         return true;
      }
      return true;    
  }
  
  if (msg.command === "remove") { 
      DO("unset", { 
         key: msg.key 
      }); 
      return true;    
  }
  
  if (msg.command === "directory" && this.sender !== directory) { 
      DO("forward"); 
      return true;    
  }
  
  if (msg.command === "DirectorySearch") { 
      DO("forward"); 
      return true;    
  }
 
  if (msg.command === "friend") { 
      var peers = CS("peers");
      peers[this.msg.identity] = "pending";
      DO("forward"); 
      return true;    
  }
  
});

UPON("arrived", function() {
 
  /* reject all messages from a blocked user */
  var peers = CS("peers");
  var status = peers[this.sender];
  if(status !== undefined && status === "blocked"){
  	return false;
  } 
  
  /* friend(identity) */
  if(this.message.command === "friend"){
  	var peers = CS("peers");
  	peers[this.sender] = "requested";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "friend requested you!"
  		}
  	});
  	return true;
  }
  
  /* approve(identity) */
  if(this.message.command === "approve"){
  	var peers = CS("peers");
  	peers[this.sender] = "friends";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "accepted your friend request! :D"
  		}
  	});
  	return true;
  }
  
  /* reject(identity) */
  if(this.message.command === "reject"){
  	var peers = CS("peers");
  	peers[this.sender] = "public";
  	DO("set", {
		key: "peers",
		value: peers  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "rejected your friend request. :("
  		}
  	});
  	return true;
  }
  
  /* request(identity, key) */
  if(this.message.command === "request"){
  	var item = CS(message.key);
  	var status = CS(sender);
  	
  	if(item === undefined){
  		return false;
  	}
  	
  	if((item.visibility === "private" && status === "friend") || item.visibility === "public" ){
  		DO("forward", {
  			sender: this.self,
  			receiver: this.sender,
  			message: item
  		});
  	} 
  	return true;
  }
  
  /*directorySearch(criteria)*/
  if(this.message.command === "directorySearch" && this.self === directory){
  	var directory = CS("directory");
  	var list = [];
  	var person;
  	for(person in directory) {
  		var key;
  		var keepPerson = true; //only want to do AND scenarios
  		for(key in criteria){
			if(person[key] !== criteria[key]){
				keepPerson = false;
			}  			
  		}
  		if(keepPerson){
  			list.push(person);
  		}
  	}
  	DO("forward", {
		sender: this.self,
		receiver: this.sender,
		message: list
	});
	return true;
  }	    

  /*directory(action, key, value)*/
  if(this.message.command === "directory" && this.self === directory){
  	if(this.message.action === "list"){
  		var directory = CS("directory");
  		directory[this.sender][this.message.key] = this.message.value;
  		DO("set", {
			key: "directory",
			value: directory  	
  		});
  		return true;
  	}
  	
  	if(this.message.action === "unlist"){
  		var directory = CS("directory");
  		directory[this.sender][this.message.key] = undefined;
  		DO("set", {
			key: "directory",
			value: directory  	
  		});
  		return true;
  	}
  	return false;
  }	
  
  /*adopted(person)*/
  if(this.message.command === "adopted" && this.self === directory){
  	var directory = CS("directory");
  	directory[this.sender] = { name: this.sender };
  	/*directory[this.sender][<name>] = stuff;*/
  	DO("set", {
		key: "directory",
		value: directory  	
  	});
  	return true;
  }
  
  /* message(identity, val) */
  if(this.message.command === "message"){
  	DO("deliver", { 
  		message: { 
  			from: this.sender, 
  			message: this.message.val 
  		}
  	});
  	return true;
  }
  
  DO("deliver");
  return true;
});

UPON("disconnected", function() {
  DO("quit");
  return true;
});