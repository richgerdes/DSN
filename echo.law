law(echo, language(javascript))
/*
	upon adoption also initialize
		key: peers, value: {}
*/
UPON("sent", function() {var parts2 = this.message.split(" ", 2);
  var parts3 = this.message.split(" ", 3);
  var parts4 = this.message.split(" ", 4);
  var msg = {command:parts2[0]};
  
  switch(msg.command){
	case "set":
	  msg.visibility = parts3[1];
	  msg.key = parts3[2];
	  break;
	case "add":
	case "update":
	  msg.key = parts3[1];
	  msg.value = parts3[2];
	  break;
	case "remove":
	  msg.key = parts2[1];
	  break;
	case "request":
	  msg.key = parts3[2];
	  msg.identity = parts3[1];
	  break;
	case "directory":
	  if(parts3[1] == "list" || parts3[1] == "unlist"){
	    msg.action = parts3[1];
        msg.key = parts3[3];
	  }else if(parts3[1] == "search"){
		msg.action = parts3[1];
		msg.criteria = parts3[2];
	  }
	  break;
	case "friend":
	case "approve":
	case "reject":
	case "revoke":
	case "block":
	case "unblock":
	  msg.identity = parts2[1];
	  break;
	case "message":
	  msg.identity = parts3[1];
	  msg.identity = parts3[2];
	  break;
	default:
	  DO("forward", {
        sender:this.self,
        receiver:this.self,
        message: "Invalid command!! Try again!"
      });
  }
  return true;
});

UPON("arrived", function() {
 
  /* reject all messages from a blocked user */
  var peers = CS("peers");
  var status = peers[this.sender];
  if(status !== undefined && status === "blocked"){
  	return false;
  } 
  
  /* friend(identity) */
  if(this.message.command === "friend"){
  	DO("set", {
		key: this.sender,
		value: "pending"  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "friend requested you!"
  		}
  	});
  	return true;
  }
  
  /* approve(identity) */
  if(this.message.command === "approve"){
  	DO("set", {
		key: this.sender,
		value: "friends"  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "accepted your friend request! :D"
  		}
  	});
  }
  
  /* reject(identity) */
  if(this.message.command === "reject"){
  	DO("unset", {
		key: this.sender  	
  	});
  	DO("deliver", {
  		message: {
  			from: this.sender,
  			message: "rejected your friend request. :("
  		}
  	});
  }
  
  /* request(identity, key) */
  /*changed event to command*/
  if(this.message.command === "request"){
  	var item = CS(message.key);
  	var status = CS(sender);
  	
  	if(item === undefined){
  		return true;
  	}
  	
  	if((item.visibility === "private" && status === "friend") || item.visibility === "public" ){
  		DO("forward", {
  			sender: this.self,
  			receiver: this.sender,
  			message: item
  		});
  	} 
  	
  	return true;
  }
  
  /*directorySearch(criteria)*/
  if(this.message.command === "directorySearch" && this.self === directory){
  	
  }	    

  /*directory(action, key)*/
  if(this.message.command === "directory" && this.self === directory){
  	
  }	
  
  /* message(identity, val) */
  if(this.message.command === "message"){
  	DO("deliver", { 
  		message: { 
  			from: this.sender, 
  			message: this.message.val 
  		}
  	});
  	return true;
  }
  
  DO("deliver");
  return true;
});

UPON("disconnected", function() {
  DO("quit");
  return true;
});